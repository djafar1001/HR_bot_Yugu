from setings_test import TOKEN_T_BOT as TOKEN
import HR_Lib as lib
import telebot
from telebot import types
# import datetime
# import pickle
from time import time

bot = telebot.TeleBot(TOKEN.get('token'))  # –ø—Ä–∏–≤—è–∑–∫–∞ –±–æ—Ç–∞ –∫ –∫–æ–¥—É

global employee


class Employee:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""

    def __init__(self, name, id_user):
        self.name = name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.id_user = id_user  # ID —á–∞—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # self.training_start = lib.datetime.now()
        self.training_start = time()  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç-–±–æ—Ç–æ–º –≤ Unix –æ—Ç –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏
        # self.training_start = lib.time_begin()  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç-–±–æ—Ç–æ–º
        self.adaptation_dey = 0  # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–Ω—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        self.current_course = 1  # –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
        self.courses = [0] * 15  # –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
        self.score_dey = [0] * 6  # –û—Ü–µ–Ω–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        self.score_second_dey = [0] * 3  # –û—Ü–µ–Ω–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è
        self.name_questionnaire = questions_dict
        self.second_quest = False
        self.check_score = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ (1-–¥–∞, 0-–Ω–µ—Ç)
        self.adaptation_completed = False  # –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        self.index_question = 0  # –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
        self.lost_message = None
        self.id_hi = 0  # –∏–Ω–¥–µ–∫—Å —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        self.survey_days = [3, 4, 5]  # –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø—Ä–æ—Å—ã


quest_rez = {}  # –°–ª–æ–≤–∞—Ä—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è

questions_dict = {
    3: [
        "–°–æ–æ–±—â–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–¥–µ—è—Ö —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —á–∞—Ç –±–æ—Ç–∞?",
        "–°–æ–æ–±—â–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–¥–µ—è—Ö —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        "–û—Ü–µ–Ω–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ ¬´–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏¬ª (–æ—Ç 1 –¥–æ 10)",
    ],
    4: [
        "–ß—Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –≤ —Ä–∞–±–æ—Ç–µ —á–∞—Ç –±–æ—Ç–∞?",
        "–° –∫–∞–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏?",
        "–û—Ü–µ–Ω–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏ ¬´–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏¬ª (–æ—Ç 1 –¥–æ 10)",
    ],
    5: [
        "–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?",
        "–ß—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?",
        "–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ç—ã –æ–±—â–∞–ª—Å—è —Å–æ —Å–≤–æ–∏–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º?",
        "–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é —Ç—ã –æ–±—â–∞–ª—Å—è —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—é?",
        "–ü–æ–ª—É—á–∏–ª –ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?"
    ]
}


def send_next_question():
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∫–ª—é—á—É —Ä–∞–≤–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –¥–Ω—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    """
    if employee.index_question < len(questions_dict[employee.adaptation_dey]):
        query = bot.send_message(employee.id_user, f'–í–æ–ø—Ä–æ—Å {employee.index_question + 1}\n'
                                                   f'{questions_dict[employee.adaptation_dey][employee.index_question]}')
        bot.register_next_step_handler(query, save_query)
    else:
        bot.send_message(employee.id_user, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å')
        employee.index_question = 0
        # ===========================
        if employee.survey_days:
            continue_quest()
        else:
            bot.send_message(employee.id_user, f'quest_rez={quest_rez}')
            bot.send_message(employee.id_user, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ')


def continue_quest():
    """–í–†–ï–ú–ï–ù–ù–ê–Ø –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–Ω—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏"""
    employee.adaptation_dey = employee.survey_days.pop(0)
    quest_rez[employee.adaptation_dey] = []
    bot.send_message(employee.id_user, f'–î–µ–Ω—å {employee.adaptation_dey}, –æ—Å—Ç–∞–ª–æ—Å—å {employee.survey_days}')
    send_next_question()


# ===========================
def save_query(message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤,
    –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∫–ª—é—á—É –¥–Ω—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    –ò –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    """
    quest_rez[employee.adaptation_dey].append(message.text)
    employee.index_question += 1
    send_next_question()


# ==================================================
def simple_menu(call_yes='yes', call_no='no'):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Inline-–º–µ–Ω—é —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    :return: markup: InlineKeyboard
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    butt_yes = types.InlineKeyboardButton('–î–∞', callback_data=call_yes)
    butt_no = types.InlineKeyboardButton('–ù–µ—Ç', callback_data=call_no)
    markup.add(butt_yes, butt_no)

    return markup


# ===================================================


@bot.message_handler(commands=['start'])
def handle_start(message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global employee
    employee = Employee('Alex', message.chat.id)
    # employee.adaptation_dey = choice_day()
    employee.adaptation_dey = employee.survey_days.pop(0)
    bot.send_message(employee.id_user, f'–î–µ–Ω—å {employee.adaptation_dey}, –æ—Å—Ç–∞–ª–æ—Å—å {employee.survey_days}')
    bot.send_message(employee.id_user, '–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å?', reply_markup=simple_menu('yes', 'no'))
    pass


@bot.message_handler(commands=['changeday'])
def change_day_command(message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã changeday"""
    pass


# @bot.message_handler(content_types=['text'])
# def text_reaction(message):
#     if employee.question_process:
#         pass


@bot.callback_query_handler(func=lambda call: True)
def pressing_reaction(call):
    if call.data == 'yes':
        quest_rez[employee.adaptation_dey] = []
        send_next_question()
    elif call.data == 'no':
        bot.send_message(employee.id_user, '–ñ–∞–ª—åüò¢, –Ω–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ')


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print('–ú–æ–π HR-–±–æ—Ç')
    print(lib.format_time(time()))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    print('Started')
    bot.polling(none_stop=True, interval=0)
    print('Stopped')
